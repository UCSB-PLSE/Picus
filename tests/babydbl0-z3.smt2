(set-logic QF_NIA)
(declare-const p Int)
(assert (= p 21888242871839275222246405745257275088548364400416034343698204186575808495617))
(declare-const ps1 Int)
(assert (= ps1 21888242871839275222246405745257275088548364400416034343698204186575808495616))
(declare-const ps2 Int)
(assert (= ps2 21888242871839275222246405745257275088548364400416034343698204186575808495615))
(declare-const ps3 Int)
(assert (= ps3 21888242871839275222246405745257275088548364400416034343698204186575808495614))
(declare-const ps4 Int)
(assert (= ps4 21888242871839275222246405745257275088548364400416034343698204186575808495613))
(declare-const ps5 Int)
(assert (= ps5 21888242871839275222246405745257275088548364400416034343698204186575808495612))
; ================================
; ======== original block ========
; ================================
; ======== declaration constraints ========
(declare-const x0 Int)
(declare-const x1 Int)
(declare-const x2 Int)
(declare-const x3 Int)
(declare-const x4 Int)
(declare-const x5 Int)
(declare-const x6 Int)
(declare-const x7 Int)
(declare-const x8 Int)
(declare-const x9 Int)
(declare-const x10 Int)
(declare-const x11 Int)
(declare-const x12 Int)
(declare-const x13 Int)
(declare-const x14 Int)
; ======== range constraints ========
(assert (and (<= 0 1) (< 1 p)))
(assert (and (<= 0 x1) (< x1 p)))
(assert (and (<= 0 x2) (< x2 p)))
(assert (and (<= 0 x3) (< x3 p)))
(assert (and (<= 0 x4) (< x4 p)))
(assert (and (<= 0 x5) (< x5 p)))
(assert (and (<= 0 x6) (< x6 p)))
(assert (and (<= 0 x7) (< x7 p)))
(assert (and (<= 0 x8) (< x8 p)))
(assert (and (<= 0 x9) (< x9 p)))
(assert (and (<= 0 x10) (< x10 p)))
(assert (and (<= 0 x11) (< x11 p)))
(assert (and (<= 0 x12) (< x12 p)))
(assert (and (<= 0 x13) (< x13 p)))
(assert (and (<= 0 x14) (< x14 p)))
(assert (= 0 (mod (+ x3 (* ps1 x7)) p)))
(assert (= 0 (mod (+ x4 (* ps1 x8)) p)))
(assert (= 0 (mod (+ x3 (* ps1 x9)) p)))
(assert (= 0 (mod (+ x4 (* ps1 x10)) p)))
(assert (= 0 (mod (+ (* ps1 x1) x5) p)))
(assert (= 0 (mod (+ (* ps1 x2) x6) p)))
(assert (= (mod (* ps1 (* x7 x10)) p) (mod (* ps1 x11) p)))
(assert (= (mod (* ps1 (* x8 x9)) p) (mod (* ps1 x12) p)))
(assert (= (mod (+ (* 168700 (* x7 x9)) (+ (* 168700 (* x7 x10)) (+ (* ps1 (* x8 x9)) (* ps1 (* x8 x10))))) p) (mod (* ps1 x13) p)))
(assert (= (mod (* ps1 (* x11 x12)) p) (mod (* ps1 x14) p)))
(assert (= (mod (+ x5 (* 168696 (* x14 x5))) p) (mod (+ x11 x12) p)))
(assert (= (mod (+ x6 (* 21888242871839275222246405745257275088548364400416034343698204186575808326921 (* x14 x6))) p) (mod (+ (* 168700 x11) (+ (* ps1 x12) x13)) p)))
(assert (= 1 1))
; ===================================
; ======== alternative block ========
; ===================================
; ======== declaration constraints ========
; x0: already defined
(declare-const y1 Int)
(declare-const y2 Int)
; x3: already defined
; x4: already defined
(declare-const y5 Int)
(declare-const y6 Int)
(declare-const y7 Int)
(declare-const y8 Int)
(declare-const y9 Int)
(declare-const y10 Int)
(declare-const y11 Int)
(declare-const y12 Int)
(declare-const y13 Int)
(declare-const y14 Int)
; ======== range constraints ========
; x0: already defined
(assert (and (<= 0 y1) (< y1 p)))
(assert (and (<= 0 y2) (< y2 p)))
; x3: already defined
; x4: already defined
(assert (and (<= 0 y5) (< y5 p)))
(assert (and (<= 0 y6) (< y6 p)))
(assert (and (<= 0 y7) (< y7 p)))
(assert (and (<= 0 y8) (< y8 p)))
(assert (and (<= 0 y9) (< y9 p)))
(assert (and (<= 0 y10) (< y10 p)))
(assert (and (<= 0 y11) (< y11 p)))
(assert (and (<= 0 y12) (< y12 p)))
(assert (and (<= 0 y13) (< y13 p)))
(assert (and (<= 0 y14) (< y14 p)))
(assert (= 0 (mod (+ x3 (* ps1 y7)) p)))
(assert (= 0 (mod (+ x4 (* ps1 y8)) p)))
(assert (= 0 (mod (+ x3 (* ps1 y9)) p)))
(assert (= 0 (mod (+ x4 (* ps1 y10)) p)))
(assert (= 0 (mod (+ (* ps1 y1) y5) p)))
(assert (= 0 (mod (+ (* ps1 y2) y6) p)))
(assert (= (mod (* ps1 (* y7 y10)) p) (mod (* ps1 y11) p)))
(assert (= (mod (* ps1 (* y8 y9)) p) (mod (* ps1 y12) p)))
(assert (= (mod (+ (* 168700 (* y7 y9)) (+ (* 168700 (* y7 y10)) (+ (* ps1 (* y8 y9)) (* ps1 (* y8 y10))))) p) (mod (* ps1 y13) p)))
(assert (= (mod (* ps1 (* y11 y12)) p) (mod (* ps1 y14) p)))
(assert (= (mod (+ y5 (* 168696 (* y14 y5))) p) (mod (+ y11 y12) p)))
(assert (= (mod (+ y6 (* 21888242871839275222246405745257275088548364400416034343698204186575808326921 (* y14 y6))) p) (mod (+ (* 168700 y11) (+ (* ps1 y12) y13)) p)))
(assert (= 1 1))
; =============================
; ======== known block ========
; =============================
(assert (= 1 1))
(assert (= x3 x3))
(assert (= x4 x4))
(assert (= x7 y7))
(assert (= x8 y8))
(assert (= x9 y9))
(assert (= x10 y10))
(assert (= x11 y11))
(assert (= x12 y12))
(assert (= x13 y13))
(assert (= x14 y14))
; ======== preconditions ========
(assert (! (= x14 1)))
(assert (! (= x14 -1)))
(assert (! (= y14 1)))
(assert (! (= y14 -1)))
; =============================
; ======== query block ========
; =============================
(assert (not (= x6 y6)))
(check-sat)
(get-model)