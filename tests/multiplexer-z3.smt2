(set-logic QF_NIA)
(declare-const p Int)
(assert (= p 21888242871839275222246405745257275088548364400416034343698204186575808495617))
(declare-const ps1 Int)
(assert (= ps1 21888242871839275222246405745257275088548364400416034343698204186575808495616))
(declare-const ps2 Int)
(assert (= ps2 21888242871839275222246405745257275088548364400416034343698204186575808495615))
(declare-const ps3 Int)
(assert (= ps3 21888242871839275222246405745257275088548364400416034343698204186575808495614))
(declare-const ps4 Int)
(assert (= ps4 21888242871839275222246405745257275088548364400416034343698204186575808495613))
(declare-const ps5 Int)
(assert (= ps5 21888242871839275222246405745257275088548364400416034343698204186575808495612))
; ================================
; ======== original block ========
; ================================
; ======== declaration constraints ========
(declare-const x0 Int)
(declare-const x1 Int)
(declare-const x2 Int)
(declare-const x3 Int)
(declare-const x4 Int)
(declare-const x5 Int)
(declare-const x6 Int)
(declare-const x7 Int)
(declare-const x8 Int)
(declare-const x9 Int)
(declare-const x10 Int)
(declare-const x11 Int)
(declare-const x12 Int)
(declare-const x13 Int)
(declare-const x14 Int)
(declare-const x15 Int)
(declare-const x16 Int)
(declare-const x17 Int)
(declare-const x18 Int)
(declare-const x19 Int)
(declare-const x20 Int)
(declare-const x21 Int)
(declare-const x22 Int)
(declare-const x23 Int)
(declare-const x24 Int)
(declare-const x25 Int)
; ======== range constraints ========
(assert (and (<= 0 1) (< 1 p)))
(assert (and (<= 0 x1) (< x1 p)))
(assert (and (<= 0 x2) (< x2 p)))
(assert (and (<= 0 x3) (< x3 p)))
(assert (and (<= 0 x4) (< x4 p)))
(assert (and (<= 0 x5) (< x5 p)))
(assert (and (<= 0 x6) (< x6 p)))
(assert (and (<= 0 x7) (< x7 p)))
(assert (and (<= 0 x8) (< x8 p)))
(assert (and (<= 0 x9) (< x9 p)))
(assert (and (<= 0 x10) (< x10 p)))
(assert (and (<= 0 x11) (< x11 p)))
(assert (and (<= 0 x12) (< x12 p)))
(assert (and (<= 0 x13) (< x13 p)))
(assert (and (<= 0 x14) (< x14 p)))
(assert (and (<= 0 x15) (< x15 p)))
(assert (and (<= 0 x16) (< x16 p)))
(assert (and (<= 0 x17) (< x17 p)))
(assert (and (<= 0 x18) (< x18 p)))
(assert (and (<= 0 x19) (< x19 p)))
(assert (and (<= 0 x20) (< x20 p)))
(assert (and (<= 0 x21) (< x21 p)))
(assert (and (<= 0 x22) (< x22 p)))
(assert (and (<= 0 x23) (< x23 p)))
(assert (and (<= 0 x24) (< x24 p)))
(assert (and (<= 0 x25) (< x25 p)))
(assert (= 0 (mod (+ x7 (* ps1 x11)) p)))
(assert (= 0 (mod (+ x3 (* ps1 x13)) p)))
(assert (= 0 (mod (+ x8 (* ps1 x15)) p)))
(assert (= 0 (mod (+ x5 (* ps1 x14)) p)))
(assert (= 0 (mod (+ x9 (* ps1 x16)) p)))
(assert (= 0 (mod (+ (* ps1 x1) x12) p)))
(assert (= 0 (mod (+ x4 (* ps1 x20)) p)))
(assert (= 0 (mod (+ x8 (* ps1 x22)) p)))
(assert (= 0 (mod (+ x6 (* ps1 x21)) p)))
(assert (= 0 (mod (+ x9 (* ps1 x23)) p)))
(assert (= 0 (mod (+ (* ps1 x2) x19) p)))
(assert (= 0 (mod (+ 1 (* ps1 x10)) p)))
(assert (= (mod (* x11 x8) p) 0))
(assert (= (mod (+ (* ps1 x9) (* x11 x9)) p) 0))
(assert (= 0 (mod (+ x8 (+ x9 (* ps1 x10))) p)))
(assert (= (mod (+ (* ps1 x10) (* x10 x10)) p) 0))
(assert (= (mod (* ps1 (* x13 x15)) p) (mod (* ps1 x17) p)))
(assert (= (mod (* ps1 (* x14 x16)) p) (mod (* ps1 x18) p)))
(assert (= 0 (mod (+ (* ps1 x12) (+ x17 x18)) p)))
(assert (= (mod (* ps1 (* x20 x22)) p) (mod (* ps1 x24) p)))
(assert (= (mod (* ps1 (* x21 x23)) p) (mod (* ps1 x25) p)))
(assert (= 0 (mod (+ (* ps1 x19) (+ x24 x25)) p)))
(assert (= 1 1))
; ===================================
; ======== alternative block ========
; ===================================
; ======== declaration constraints ========
; x0: already defined
(declare-const y1 Int)
(declare-const y2 Int)
; x3: already defined
; x4: already defined
; x5: already defined
; x6: already defined
; x7: already defined
(declare-const y8 Int)
(declare-const y9 Int)
(declare-const y10 Int)
(declare-const y11 Int)
(declare-const y12 Int)
(declare-const y13 Int)
(declare-const y14 Int)
(declare-const y15 Int)
(declare-const y16 Int)
(declare-const y17 Int)
(declare-const y18 Int)
(declare-const y19 Int)
(declare-const y20 Int)
(declare-const y21 Int)
(declare-const y22 Int)
(declare-const y23 Int)
(declare-const y24 Int)
(declare-const y25 Int)
; ======== range constraints ========
; x0: already defined
(assert (and (<= 0 y1) (< y1 p)))
(assert (and (<= 0 y2) (< y2 p)))
; x3: already defined
; x4: already defined
; x5: already defined
; x6: already defined
; x7: already defined
(assert (and (<= 0 y8) (< y8 p)))
(assert (and (<= 0 y9) (< y9 p)))
(assert (and (<= 0 y10) (< y10 p)))
(assert (and (<= 0 y11) (< y11 p)))
(assert (and (<= 0 y12) (< y12 p)))
(assert (and (<= 0 y13) (< y13 p)))
(assert (and (<= 0 y14) (< y14 p)))
(assert (and (<= 0 y15) (< y15 p)))
(assert (and (<= 0 y16) (< y16 p)))
(assert (and (<= 0 y17) (< y17 p)))
(assert (and (<= 0 y18) (< y18 p)))
(assert (and (<= 0 y19) (< y19 p)))
(assert (and (<= 0 y20) (< y20 p)))
(assert (and (<= 0 y21) (< y21 p)))
(assert (and (<= 0 y22) (< y22 p)))
(assert (and (<= 0 y23) (< y23 p)))
(assert (and (<= 0 y24) (< y24 p)))
(assert (and (<= 0 y25) (< y25 p)))
(assert (= 0 (mod (+ x7 (* ps1 y11)) p)))
(assert (= 0 (mod (+ x3 (* ps1 y13)) p)))
(assert (= 0 (mod (+ y8 (* ps1 y15)) p)))
(assert (= 0 (mod (+ x5 (* ps1 y14)) p)))
(assert (= 0 (mod (+ y9 (* ps1 y16)) p)))
(assert (= 0 (mod (+ (* ps1 y1) y12) p)))
(assert (= 0 (mod (+ x4 (* ps1 y20)) p)))
(assert (= 0 (mod (+ y8 (* ps1 y22)) p)))
(assert (= 0 (mod (+ x6 (* ps1 y21)) p)))
(assert (= 0 (mod (+ y9 (* ps1 y23)) p)))
(assert (= 0 (mod (+ (* ps1 y2) y19) p)))
(assert (= 0 (mod (+ 1 (* ps1 y10)) p)))
(assert (= (mod (* y11 y8) p) 0))
(assert (= (mod (+ (* ps1 y9) (* y11 y9)) p) 0))
(assert (= 0 (mod (+ y8 (+ y9 (* ps1 y10))) p)))
(assert (= (mod (+ (* ps1 y10) (* y10 y10)) p) 0))
(assert (= (mod (* ps1 (* y13 y15)) p) (mod (* ps1 y17) p)))
(assert (= (mod (* ps1 (* y14 y16)) p) (mod (* ps1 y18) p)))
(assert (= 0 (mod (+ (* ps1 y12) (+ y17 y18)) p)))
(assert (= (mod (* ps1 (* y20 y22)) p) (mod (* ps1 y24) p)))
(assert (= (mod (* ps1 (* y21 y23)) p) (mod (* ps1 y25) p)))
(assert (= 0 (mod (+ (* ps1 y19) (+ y24 y25)) p)))
(assert (= 1 1))
; =============================
; ======== known block ========
; =============================
(assert (= 1 1))
(assert (= x3 x3))
(assert (= x6 x6))
(assert (= x7 x7))
(assert (= x10 y10))
(assert (= x11 y11))
(assert (= x13 y13))
(assert (= x14 y14))
(assert (= x4 x4))
(assert (= x20 y20))
(assert (= x5 x5))
(assert (= x21 y21))
; ======== lemma derivations ========
(assert (or (= 0 x11) (= 0 x8)))
(assert (or
    (= 0 (+ ps1 x11))
    (= 0 x9)
))
(assert (or
    (= 0 (+ ps1 x10))
    (= 0 x10)
))
(assert (or (= 0 y11) (= 0 y8)))
(assert (or
    (= 0 (+ ps1 y11))
    (= 0 y9)
))
(assert (or
    (= 0 (+ ps1 y10))
    (= 0 y10)
))
; =============================
; ======== query block ========
; =============================
(assert (not (= x1 y1)))
(check-sat)
(get-model)