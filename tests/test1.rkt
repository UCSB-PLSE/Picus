#lang rosette
(define-symbolic x0 integer?)
(define-symbolic x1 integer?)
(define-symbolic x2 integer?)
(define-symbolic x3 integer?)
(define p 21888242871839275222246405745257275088548364400416034343698204186575808495617)
(define (assert-range x) (assert (&& (>= x 0) (< x p))))
(assert-range x0)
(assert-range x1)
(assert-range x2)
(assert-range x3)
(assert (= x0 1))

(define c0 (=
  0
  (modulo (+ (* 21888242871839275222246405745257275088548364400416034343698204186575808495616 x0) (* x1 x1)) p)
))

(define c1 (=
  0
  (modulo (+ (* 21888242871839275222246405745257275088548364400416034343698204186575808495616 x0) (* x2 x2)) p)
))

(define c2 (=
  0
  (modulo
    (+ (* 21888242871839275222246405745257275088548364400416034343698204186575808495615 x2) x3 (* 21888242871839275222246405745257275088548364400416034343698204186575808495616 x1))
    p
  )
))


(define-symbolic x1b integer?)
(define-symbolic x2b integer?)
(assert-range x1b)
(assert-range x2b)

(define c0b (=
  0
  (modulo (+ (* 21888242871839275222246405745257275088548364400416034343698204186575808495616 x0) (* x1b x1b)) p)
))

(define c1b (=
  0
  (modulo (+ (* 21888242871839275222246405745257275088548364400416034343698204186575808495616 x0) (* x2b x2b)) p)
))

(define c2b (=
  0
  (modulo
    (+ (* 21888242871839275222246405745257275088548364400416034343698204186575808495615 x2b) x3 (* 21888242871839275222246405745257275088548364400416034343698204186575808495616 x1b))
    p
  )
))

(solve (assert (&& c0 c1 c2 c0b c1b c2b (! (= x2 x2b)) (! (= x1 x1b)))))